# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T19:38:38+00:00



import argparse
import json
import os
from typing import *

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity

from models import Bng2latlongEastingNorthingGetResponse

app = MCPProxy(
    contact={
        'email': 'info@getthedata.com',
        'name': 'bng2latlong',
        'url': 'https://www.getthedata.com/bng2latlong',
        'x-twitter': 'getthedatacom',
    },
    description='Convert an OSGB36 easting and northing (British National Grid) to WGS84 latitude and longitude.',
    title='bng2latlong',
    version='1.0',
    servers=[{'url': 'https://api.getthedata.com'}],
)


@app.get(
    '/bng2latlong/{easting}/{northing}',
    description=""" Takes an OSGB36 easting and northing (British National Grid) and returns the geographically equivalent WGS84 latitude and longitude.
#### A successful request returns the following fields:
* status - this will be `ok`
* easting - the easting provided in the request
* northing - the northing provided in the request
* latitude - the latitude of the converted coordinates
* longitude - the longitude of the converted coordinates
#### An unsuccessful request returns the following fields:
* status - this will be `error`
* error - an error message
 """,
    tags=['coordinate_conversion'],
)
def get_bng2latlong__easting__northing(easting: int, northing: int = ...):
    """
    Returns latitude and longitude for the given easting and northing.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
